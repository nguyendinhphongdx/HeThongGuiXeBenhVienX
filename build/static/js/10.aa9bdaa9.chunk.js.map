{"version":3,"sources":["../node_modules/@ant-design/icons-svg/es/asn/LeftOutlined.js","../node_modules/@ant-design/icons/es/icons/LeftOutlined.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","../../src/utils/isCheckBoxInput.ts","../../src/utils/isDateObject.ts","../../src/utils/isNullOrUndefined.ts","../../src/utils/isObject.ts","../../src/logic/getNodeParentName.ts","../../src/logic/isNameInFieldArray.ts","../../src/utils/compact.ts","../../src/utils/isUndefined.ts","../../src/utils/get.ts","../../src/constants.ts","../../src/utils/omit.ts","../../src/logic/getProxyFormState.ts","../../src/useFormContext.tsx","../../src/utils/isEmptyObject.ts","../../src/logic/shouldRenderFormState.ts","../../src/utils/convertToArrayPayload.ts","../../src/useSubscribe.ts","../../src/logic/appendErrors.ts","../../src/utils/isKey.ts","../../src/utils/stringToPath.ts","../../src/utils/set.ts","../../src/logic/focusFieldBy.ts","../../src/utils/remove.ts","../../src/utils/isFunction.ts","../../src/utils/cloneObject.ts","../../src/utils/isPrimitive.ts","../../src/utils/deepEqual.ts","../../src/utils/getValidationModes.ts","../../src/utils/isBoolean.ts","../../src/utils/isHTMLElement.ts","../../src/utils/isMultipleSelect.ts","../../src/utils/isRadioInput.ts","../../src/utils/isRadioOrCheckbox.ts","../../src/utils/isString.ts","../../src/utils/isWeb.ts","../../src/utils/live.ts","../../src/utils/Subject.ts","../../src/utils/unset.ts","../../src/utils/isFileInput.ts","../../src/logic/getCheckboxValue.ts","../../src/logic/getFieldValueAs.ts","../../src/logic/getRadioValue.ts","../../src/logic/getFieldValue.ts","../../src/logic/getResolverOptions.ts","../../src/logic/hasValidation.ts","../../src/utils/deepMerge.ts","../../src/logic/setFieldArrayDirtyFields.ts","../../src/logic/skipValidation.ts","../../src/logic/unsetEmptyArray.ts","../../src/utils/isMessage.ts","../../src/utils/isRegex.ts","../../src/logic/getValidateError.ts","../../src/logic/getValueAndMessage.ts","../../src/logic/validateField.ts","../../src/logic/createFormControl.ts","../../src/useForm.ts"],"names":["LeftOutlined","props","ref","React","AntdIcon","_objectSpread","icon","LeftOutlinedSvg","displayName","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","err","normalCompletion","didErr","step","next","_e2","element","type","data","Date","isObjectType","isNullOrUndefined","isDateObject","name","substring","search","names","some","current","getNodeParentName","filter","Boolean","val","undefined","obj","path","defaultValue","isObject","result","compact","split","reduce","key","isUndefined","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","source","copy","formState","_proxyFormState","localProxyFormState","isRoot","createGetter","prop","Object","defineProperty","get","keys","formStateData","omit","isEmptyObject","find","tearDown","_unsubscribe","unsubscribe","useSubscribe","_updateSubscription","disabled","subject","subscribe","callback","updateSubscriptionProps","skipEarlySubscription","validateAllFieldCriteria","errors","message","types","test","input","replace","set","object","index","tempPath","isKey","stringToPath","lastIndex","newValue","objValue","isNaN","focusFieldBy","fields","fieldsNames","field","_f","focus","refs","cloneObject","Set","isFunction","deepEqual","object1","object2","isPrimitive","getTime","keys1","keys2","val1","includes","val2","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","HTMLElement","isRadioInput","isCheckBoxInput","window","document","isHTMLElement","contains","tearDowns","this","push","teardown","observer","subscription","closed","add","observers","subscriber","unset","previousObjRef","updatePath","childObject","slice","baseGet","k","objectRef","currentPaths","currentPathsLength","item","isBoolean","defaultResult","isValid","validResult","options","values","option","checked","map","attributes","valueAsNumber","valueAsDate","setValueAs","NaN","defaultReturn","previous","getFieldValue","every","isFileInput","files","getRadioValue","isMultipleSelect","selectedOptions","isCheckBox","getCheckboxValue","getFieldValueAs","_fields","criteriaMode","shouldUseNativeValidation","mount","required","min","max","maxLength","minLength","pattern","validate","deepMerge","target","targetValue","sourceValue","setDirtyFields","defaultValues","dirtyFields","parentNode","parentName","isBlurEvent","isTouched","isSubmitted","reValidateMode","isString","RegExp","getValidateError","validationData","isRegex","inputValue","a","inputRef","setCustomValidty","reportValidity","setCustomValidity","error","isRadio","isRadioOrCheckbox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","maxOutput","minOutput","valueDate","exceedMin","valueNumber","parseFloat","maxLengthOutput","minLengthOutput","patternValue","match","validateError","validationResult","defaultOptions","shouldFocusError","isWindowUndefined","createFormControl","delayErrorCallback","_options","_formState","isDirty","isValidating","submitCount","touchedFields","isSubmitting","isSubmitSuccessful","_defaultValues","_formValues","shouldUnregister","_stateFlags","action","watch","_names","unMount","array","timer","validateFields","_subjects","control","state","validationModeBeforeSubmit","getValidationModes","validationModeAfterSubmit","shouldDisplayAllAssociatedErrors","debounce","wait","args","clearTimeout","setTimeout","isFieldWatched","watchAll","has","_updateValid","shouldSkipRender","resolver","executeResolver","executeBuildInValidation","_updateFieldArray","method","shouldSetValues","shouldSetFields","fieldValues","argA","argB","unsetEmptyArray","updateFieldArrayDirty","_getDirty","updateErrors","updateValidAndValue","shouldSkipSetValueAs","defaultChecked","setFieldValue","updateTouchAndDirty","fieldValue","isCurrentTouched","shouldRender","isFieldDirty","output","isPreviousFieldTouched","isPreviousFormDirty","isPreviousFieldDirty","isCurrentFieldPristine","setFieldArrayDirtyFields","shouldRenderByError","fieldState","previousFieldError","shouldUpdateValid","delayError","updatedFormState","context","executeResolverValidation","shouldOnlyCheckValid","valid","fieldReference","validateField","fieldError","_removeUnmounted","live","unregister","getValues","_getWatch","isGlobal","convertToArrayPayload","fieldName","_getFieldArray","isWeb","forEach","selectRef","selected","checkboxRef","radioRef","shouldDirty","shouldTouch","shouldValidate","trigger","setValues","fieldKey","setValue","isFieldArray","handleChange","event","shouldSkipValidation","hasValidation","deps","skipValidation","isWatched","onBlur","onChange","parentNodeName","parentField","parentError","fieldNames","Promise","all","shouldFocus","clearErrors","inputName","setError","info","delete","keepValue","keepError","keepDirty","keepTouched","keepDefaultValue","keepIsValid","register","fieldRef","querySelectorAll","isRadioOrCheckboxFunction","handleSubmit","onValid","onInvalid","preventDefault","persist","hasNoPromiseError","reset","formValues","keepStateOptions","hasUpdatedFormValues","updatedValues","cloneUpdatedValues","keepDefaultValues","keepValues","closest","keepSubmitCount","keepIsSubmitted","keepErrors","setFocus","useForm","_formControl","updateFormState","shouldRenderFormState","getProxyFormState"],"mappings":"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","file":"static/js/10.aa9bdaa9.chunk.js","sourcesContent":["// This icon file is generated automatically.\nvar LeftOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M724 218.3V141c0-6.7-7.7-10.4-12.9-6.3L260.3 486.8a31.86 31.86 0 000 50.3l450.8 352.1c5.3 4.1 12.9.4 12.9-6.3v-77.3c0-4.9-2.3-9.6-6.1-12.6l-360-281 360-281.1c3.8-3 6.1-7.7 6.1-12.6z\" } }] }, \"name\": \"left\", \"theme\": \"outlined\" };\nexport default LeftOutlined;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport LeftOutlinedSvg from \"@ant-design/icons-svg/es/asn/LeftOutlined\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar LeftOutlined = function LeftOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: LeftOutlinedSvg\n  }));\n};\n\nLeftOutlined.displayName = 'LeftOutlined';\nexport default /*#__PURE__*/React.forwardRef(LeftOutlined);","import unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","export default (data: unknown) => data instanceof Date;\n","export default (value: unknown): value is null | undefined => value == null;\n","import isDateObject from './isDateObject';\nimport isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !isDateObject(value);\n","export default (name: string) => name.substring(0, name.search(/.\\d/)) || name;\n","import { InternalFieldName } from '../types';\n\nimport getNodeParentName from './getNodeParentName';\n\nexport default (names: Set<InternalFieldName>, name: InternalFieldName) =>\n  [...names].some((current) => getNodeParentName(name) === current);\n","export default (value: any[]) => value.filter(Boolean);\n","export default (val: unknown): val is undefined => val === undefined;\n","import compact from './compact';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\n\nexport default <T extends unknown>(\n  obj: T,\n  path: string,\n  defaultValue?: unknown,\n) => {\n  if (isObject(obj) && path) {\n    const result = compact(path.split(/[,[\\].]+?/)).reduce(\n      (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n      obj,\n    );\n\n    return isUndefined(result) || result === obj\n      ? isUndefined(obj[path as keyof T])\n        ? defaultValue\n        : obj[path as keyof T]\n      : result;\n  }\n\n  return undefined;\n};\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default <Key extends string, T extends Record<Key, any>>(\n  source: T,\n  key: Key,\n): Omit<T, Key> => {\n  const copy = { ...source };\n  delete copy[key];\n\n  return copy;\n};\n","import { VALIDATION_MODE } from '../constants';\nimport { FormState, FormStateProxy, ReadFormState } from '../types';\n\nexport default <TFieldValues>(\n  formState: FormState<TFieldValues>,\n  _proxyFormState: ReadFormState,\n  localProxyFormState?: ReadFormState,\n  isRoot = true,\n) => {\n  function createGetter(prop: keyof FormStateProxy) {\n    return () => {\n      if (prop in formState) {\n        if (_proxyFormState[prop] !== VALIDATION_MODE.all) {\n          _proxyFormState[prop] = !isRoot || VALIDATION_MODE.all;\n        }\n        localProxyFormState && (localProxyFormState[prop] = true);\n        return formState[prop];\n      }\n      return undefined;\n    };\n  }\n\n  const result = {} as any as typeof formState;\n  for (const key in formState) {\n    Object.defineProperty(result, key, {\n      get: createGetter(key as keyof FormStateProxy),\n    });\n  }\n\n  return result;\n};\n","import * as React from 'react';\n\nimport omit from './utils/omit';\nimport { FieldValues, FormProviderProps, UseFormReturn } from './types';\n\nconst HookFormContext = React.createContext<UseFormReturn | null>(null);\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues,\n>(): UseFormReturn<TFieldValues> =>\n  React.useContext(HookFormContext) as unknown as UseFormReturn<TFieldValues>;\n\nexport const FormProvider = <\n  TFieldValues extends FieldValues,\n  TContext extends object = object,\n>(\n  props: FormProviderProps<TFieldValues, TContext>,\n) => (\n  <HookFormContext.Provider\n    value={omit(props, 'children') as unknown as UseFormReturn}\n  >\n    {props.children}\n  </HookFormContext.Provider>\n);\n","import { EmptyObject } from '../types';\n\nimport isObject from './isObject';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import { VALIDATION_MODE } from '../constants';\nimport { ReadFormState } from '../types';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport omit from '../utils/omit';\n\nexport default <T extends Record<string, any>, K extends ReadFormState>(\n  formStateData: T,\n  _proxyFormState: K,\n  isRoot?: boolean,\n) => {\n  const formState = omit(formStateData, 'name');\n\n  return (\n    isEmptyObject(formState) ||\n    Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n    Object.keys(formState).find(\n      (key) =>\n        _proxyFormState[key as keyof ReadFormState] ===\n        (!isRoot || VALIDATION_MODE.all),\n    )\n  );\n};\n","export default <T extends unknown>(value: T) =>\n  Array.isArray(value) ? value : [value];\n","import * as React from 'react';\n\nimport { SubjectType, TearDown } from './utils/Subject';\nimport { Noop } from './types';\n\ntype Props<T> = {\n  disabled?: boolean;\n  subject: SubjectType<T>;\n  callback: (value: T) => void;\n  skipEarlySubscription?: boolean;\n};\n\ntype Unsubscribe = { unsubscribe: TearDown };\n\ntype Payload<T> = {\n  _unsubscribe: React.MutableRefObject<Unsubscribe | undefined>;\n  props: Props<T>;\n};\n\nconst tearDown = (\n  _unsubscribe: React.MutableRefObject<Unsubscribe | undefined>,\n) => {\n  if (_unsubscribe.current) {\n    _unsubscribe.current.unsubscribe();\n    _unsubscribe.current = undefined;\n  }\n};\n\nconst updateSubscriptionProps =\n  <T>({ _unsubscribe, props }: Payload<T>) =>\n  () => {\n    if (props.disabled) {\n      tearDown(_unsubscribe);\n    } else if (!_unsubscribe.current) {\n      _unsubscribe.current = props.subject.subscribe({\n        next: props.callback,\n      });\n    }\n  };\n\nexport function useSubscribe<T>(props: Props<T>) {\n  const _unsubscribe = React.useRef<Unsubscribe>();\n  const _updateSubscription = React.useRef<Noop>(() => {});\n\n  _updateSubscription.current = updateSubscriptionProps({\n    _unsubscribe,\n    props,\n  });\n\n  !props.skipEarlySubscription && _updateSubscription.current();\n\n  React.useEffect(() => {\n    _updateSubscription.current();\n    return () => tearDown(_unsubscribe);\n  }, []);\n}\n","import {\n  InternalFieldErrors,\n  InternalFieldName,\n  ValidateResult,\n} from '../types';\n\nexport default (\n  name: InternalFieldName,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","export default (value: string) => /^\\w*$/.test(value);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n","import { FieldValues } from '../types';\n\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport stringToPath from './stringToPath';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import { FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isObject from '../utils/isObject';\nimport isUndefined from '../utils/isUndefined';\nimport omit from '../utils/omit';\n\nconst focusFieldBy = (\n  fields: FieldRefs,\n  callback: (name: string) => boolean,\n  fieldsNames?: Set<InternalFieldName> | InternalFieldName[],\n) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\n\nexport default focusFieldBy;\n","import compact from './compact';\nimport convertToArrayPayload from './convertToArrayPayload';\nimport isUndefined from './isUndefined';\n\nfunction removeAtIndexes<T>(data: T[], indexes: number[]): T[] {\n  let i = 0;\n  const temp = [...data];\n\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n\n  return compact(temp).length ? temp : [];\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : removeAtIndexes(\n        data,\n        (convertToArrayPayload(index) as number[]).sort((a, b) => a - b),\n      );\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import isFunction from './isFunction';\nimport isObject from './isObject';\n\nexport default function cloneObject<T extends unknown>(data: T): T {\n  let copy: any;\n  const isArray = Array.isArray(data);\n\n  if (data instanceof Date) {\n    copy = new Date(data);\n  } else if (data instanceof Set) {\n    copy = new Set(data);\n  } else if (isArray || isObject(data)) {\n    copy = isArray ? [] : {};\n    for (const key in data) {\n      if (isFunction(data[key])) {\n        copy = data;\n        break;\n      }\n      copy[key] = cloneObject(data[key]);\n    }\n  } else {\n    return data;\n  }\n\n  return copy;\n}\n","import { Primitive } from '../types';\n\nimport isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from '../utils/isObject';\n\nimport isDateObject from './isDateObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(object1: any, object2: any) {\n  if (isPrimitive(object1) || isPrimitive(object2)) {\n    return object1 === object2;\n  }\n\n  if (isDateObject(object1) && isDateObject(object2)) {\n    return object1.getTime() === object2.getTime();\n  }\n\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    const val1 = object1[key];\n\n    if (!keys2.includes(key)) {\n      return false;\n    }\n\n    if (key !== 'ref') {\n      const val2 = object2[key];\n\n      if (\n        (isDateObject(val1) && isDateObject(val2)) ||\n        (isObject(val1) && isObject(val2)) ||\n        (Array.isArray(val1) && Array.isArray(val2))\n          ? !deepEqual(val1, val2)\n          : val1 !== val2\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `select-multiple`;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types';\n\nimport isCheckBoxInput from './isCheckBoxInput';\nimport isRadioInput from './isRadioInput';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","export default (value: unknown): value is string => typeof value === 'string';\n","export default typeof window !== 'undefined' &&\n  typeof window.HTMLElement !== 'undefined' &&\n  typeof document !== 'undefined';\n","import { Ref } from '../types';\n\nimport isHTMLElement from './isHTMLElement';\n\nexport default (ref: Ref) => !isHTMLElement(ref) || !document.contains(ref);\n","import { Noop } from '../types';\n\nexport type Observer<T> = {\n  next: (value: T) => void;\n};\n\nexport type TearDown = Noop;\n\nexport type SubjectType<T> = {\n  next: (value: T) => void;\n  subscribe: (value: Observer<T>) => {\n    unsubscribe: TearDown;\n  };\n  unsubscribe: Noop;\n};\n\nexport class Subscription {\n  private tearDowns: TearDown[] = [];\n\n  add(tearDown: TearDown) {\n    this.tearDowns.push(tearDown);\n  }\n\n  unsubscribe() {\n    for (const teardown of this.tearDowns) {\n      teardown();\n    }\n    this.tearDowns = [];\n  }\n}\n\nclass Subscriber<T> implements Observer<T> {\n  closed = false;\n\n  constructor(private observer: Observer<T>, subscription: Subscription) {\n    subscription.add(() => (this.closed = true));\n  }\n\n  next(value: T) {\n    if (!this.closed) {\n      this.observer.next(value);\n    }\n  }\n}\n\nexport default class Subject<T> {\n  observers: Observer<T>[];\n\n  constructor() {\n    this.observers = [];\n  }\n\n  next(value: T) {\n    for (const observer of this.observers) {\n      observer.next(value);\n    }\n  }\n\n  subscribe(observer: Observer<T>) {\n    const subscription = new Subscription();\n    const subscriber = new Subscriber(observer, subscription);\n    this.observers.push(subscriber);\n\n    return subscription;\n  }\n\n  unsubscribe() {\n    this.observers = [];\n  }\n}\n","import isBoolean from './isBoolean';\nimport isEmptyObject from './isEmptyObject';\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport stringToPath from './stringToPath';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import isUndefined from '../utils/isUndefined';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean | undefined;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.checked && !option.disabled)\n        .map((option) => option.value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    return options[0].checked && !options[0].disabled\n      ? // @ts-expect-error expected to work in the browser\n        options[0].attributes && !isUndefined(options[0].attributes.value)\n        ? isUndefined(options[0].value) || options[0].value === ''\n          ? validResult\n          : { value: options[0].value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import { Field } from '../types';\nimport isUndefined from '../utils/isUndefined';\n\nexport default (\n  value: any,\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\n) =>\n  isUndefined(value)\n    ? value\n    : valueAsNumber\n    ? value === ''\n      ? NaN\n      : +value\n    : valueAsDate\n    ? new Date(value)\n    : setValueAs\n    ? setValueAs(value)\n    : value;\n","type RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.checked && !option.disabled\n            ? {\n                isValid: true,\n                value: option.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { Field } from '../types';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isFileInput from '../utils/isFileInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isRadioInput from '../utils/isRadioInput';\nimport isUndefined from '../utils/isUndefined';\n\nimport getCheckboxValue from './getCheckboxValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getRadioValue from './getRadioValue';\n\nexport default function getFieldValue(_f: Field['_f']) {\n  const ref = _f.ref;\n\n  if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\n    return;\n  }\n\n  if (isFileInput(ref)) {\n    return ref.files;\n  }\n\n  if (isRadioInput(ref)) {\n    return getRadioValue(_f.refs).value;\n  }\n\n  if (isMultipleSelect(ref)) {\n    return [...ref.selectedOptions].map(({ value }) => value);\n  }\n\n  if (isCheckBox(ref)) {\n    return getCheckboxValue(_f.refs).value;\n  }\n\n  return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n","import {\n  CriteriaMode,\n  Field,\n  FieldName,\n  FieldRefs,\n  InternalFieldName,\n} from '../types';\nimport { get } from '../utils';\nimport set from '../utils/set';\n\nexport default <TFieldValues>(\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\n  _fields: FieldRefs,\n  criteriaMode?: CriteriaMode,\n  shouldUseNativeValidation?: boolean | undefined,\n) => {\n  const fields: Record<InternalFieldName, Field['_f']> = {};\n\n  for (const name of fieldsNames) {\n    const field: Field = get(_fields, name);\n\n    field && set(fields, name, field._f);\n  }\n\n  return {\n    criteriaMode,\n    names: [...fieldsNames] as FieldName<TFieldValues>[],\n    fields,\n    shouldUseNativeValidation,\n  };\n};\n","import { Field } from '../types';\n\nexport default (options: Field['_f']) =>\n  options.mount &&\n  (options.required ||\n    options.min ||\n    options.max ||\n    options.maxLength ||\n    options.minLength ||\n    options.pattern ||\n    options.validate);\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>,\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","import { get } from '../utils';\nimport deepEqual from '../utils/deepEqual';\nimport { deepMerge } from '../utils/deepMerge';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport set from '../utils/set';\n\nfunction setDirtyFields<\n  T extends Record<string, unknown>[],\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>,\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(\n          values[index][key] as T,\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        !isNullOrUndefined(defaultValues) &&\n        deepEqual(get(defaultValues[index] || {}, key), values[index][key])\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n\n    parentNode &&\n      !dirtyFields.length &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields;\n}\n\nexport default <T extends U, U extends Record<string, unknown>[]>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n) =>\n  deepMerge(\n    setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)),\n    setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)),\n  );\n","export default (\n  isBlurEvent: boolean,\n  isTouched: boolean,\n  isSubmitted: boolean,\n  reValidateMode: {\n    isOnBlur: boolean;\n    isOnChange: boolean;\n  },\n  mode: Partial<{\n    isOnSubmit: boolean;\n    isOnBlur: boolean;\n    isOnChange: boolean;\n    isOnTouch: boolean;\n    isOnAll: boolean;\n  }>,\n) => {\n  if (mode.isOnAll) {\n    return false;\n  } else if (!isSubmitted && mode.isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","import compact from '../utils/compact';\nimport get from '../utils/get';\nimport unset from '../utils/unset';\n\nexport default <T>(ref: T, name: string) =>\n  !compact(get(ref, name, [])).length && unset(ref, name);\n","import * as React from 'react';\n\nimport { Message } from '../types';\nimport isString from '../utils/isString';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import { FieldError, Ref, ValidateResult } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (\n    isMessage(result) ||\n    (Array.isArray(result) && result.every(isMessage)) ||\n    (isBoolean(result) && !result)\n  ) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import { ValidationRule } from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","import { INPUT_VALIDATION_RULES } from '../constants';\nimport { Field, FieldError, InternalFieldErrors, Message } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isMessage from '../utils/isMessage';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioInput from '../utils/isRadioInput';\nimport isRegex from '../utils/isRegex';\nimport isString from '../utils/isString';\n\nimport appendErrors from './appendErrors';\nimport getCheckboxValue from './getCheckboxValue';\nimport getRadioValue from './getRadioValue';\nimport getValidateError from './getValidateError';\nimport getValueAndMessage from './getValueAndMessage';\n\nexport default async (\n  field: Field,\n  inputValue: any,\n  validateAllFieldCriteria: boolean,\n  shouldUseNativeValidation?: boolean,\n): Promise<InternalFieldErrors> => {\n  const {\n    ref,\n    refs,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n    name,\n    valueAsNumber,\n    mount,\n    disabled,\n  } = field._f;\n  if (!mount || disabled) {\n    return {};\n  }\n  const inputRef: HTMLInputElement = refs ? refs[0] : (ref as HTMLInputElement);\n  const setCustomValidty = (message?: string | boolean) => {\n    if (shouldUseNativeValidation && inputRef.reportValidity) {\n      inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\n      inputRef.reportValidity();\n    }\n  };\n  const error: InternalFieldErrors = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty =\n    ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\n    inputValue === '' ||\n    (Array.isArray(inputValue) && !inputValue.length);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n      (isBoolean(inputValue) && !inputValue) ||\n      (isCheckBox && !getCheckboxValue(refs).isValid) ||\n      (isRadio && !getRadioValue(refs).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: inputRef,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(inputValue)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(inputValue);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if ((maxLength || minLength) && !isEmpty && isString(inputValue)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      inputValue.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      inputValue.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty && isString(inputValue)) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, inputRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          setCustomValidty(validateError.message);\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n\n      for (const key in validate) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateError = getValidateError(\n          await validate[key](inputValue),\n          inputRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          setCustomValidty(validateError.message);\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: inputRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  setCustomValidty(true);\n  return error;\n};\n","import { EVENTS, VALIDATION_MODE } from '../constants';\nimport {\n  BatchFieldArrayUpdate,\n  ChangeHandler,\n  DeepPartial,\n  DelayCallback,\n  Field,\n  FieldError,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldPath,\n  FieldRefs,\n  FieldValues,\n  FormState,\n  GetIsDirty,\n  InternalFieldName,\n  Names,\n  Path,\n  PathValue,\n  Ref,\n  ResolverResult,\n  SetFieldValue,\n  SetValueConfig,\n  Subjects,\n  UnpackNestedValue,\n  UseFormClearErrors,\n  UseFormGetValues,\n  UseFormHandleSubmit,\n  UseFormProps,\n  UseFormRegister,\n  UseFormRegisterReturn,\n  UseFormReset,\n  UseFormReturn,\n  UseFormSetError,\n  UseFormSetFocus,\n  UseFormSetValue,\n  UseFormTrigger,\n  UseFormUnregister,\n  UseFormWatch,\n  WatchInternal,\n  WatchObserver,\n} from '../types';\nimport { set } from '../utils';\nimport cloneObject from '../utils/cloneObject';\nimport compact from '../utils/compact';\nimport convertToArrayPayload from '../utils/convertToArrayPayload';\nimport deepEqual from '../utils/deepEqual';\nimport get from '../utils/get';\nimport getValidationModes from '../utils/getValidationModes';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDateObject from '../utils/isDateObject';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFunction from '../utils/isFunction';\nimport isHTMLElement from '../utils/isHTMLElement';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isPrimitive from '../utils/isPrimitive';\nimport isRadioOrCheckboxFunction from '../utils/isRadioOrCheckbox';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\nimport isWeb from '../utils/isWeb';\nimport live from '../utils/live';\nimport omit from '../utils/omit';\nimport Subject from '../utils/Subject';\nimport unset from '../utils/unset';\n\nimport focusFieldBy from './focusFieldBy';\nimport getFieldValue from './getFieldValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getNodeParentName from './getNodeParentName';\nimport getResolverOptions from './getResolverOptions';\nimport hasValidation from './hasValidation';\nimport isNameInFieldArray from './isNameInFieldArray';\nimport setFieldArrayDirtyFields from './setFieldArrayDirtyFields';\nimport skipValidation from './skipValidation';\nimport unsetEmptyArray from './unsetEmptyArray';\nimport validateField from './validateField';\n\nconst defaultOptions = {\n  mode: VALIDATION_MODE.onSubmit,\n  reValidateMode: VALIDATION_MODE.onChange,\n  shouldFocusError: true,\n} as const;\n\nconst isWindowUndefined = typeof window === 'undefined';\n\nexport function createFormControl<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): Omit<UseFormReturn<TFieldValues, TContext>, 'formState'> {\n  let _options = {\n    ...defaultOptions,\n    ...props,\n  };\n  let _formState: FormState<TFieldValues> = {\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  };\n  let _fields = {};\n  let _defaultValues = _options.defaultValues || {};\n  let _formValues = _options.shouldUnregister\n    ? {}\n    : cloneObject(_defaultValues);\n  let _stateFlags = {\n    action: false,\n    mount: false,\n    watch: false,\n  };\n  let _names: Names = {\n    mount: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set(),\n  } as Names;\n  let delayErrorCallback: DelayCallback;\n  let timer = 0;\n  let validateFields: Record<InternalFieldName, number> = {};\n  const _proxyFormState = {\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  };\n  const _subjects: Subjects<TFieldValues> = {\n    watch: new Subject(),\n    control: new Subject(),\n    array: new Subject(),\n    state: new Subject(),\n  };\n\n  const validationModeBeforeSubmit = getValidationModes(_options.mode);\n  const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n  const shouldDisplayAllAssociatedErrors =\n    _options.criteriaMode === VALIDATION_MODE.all;\n\n  const debounce =\n    <T extends Function>(callback: T, wait: number) =>\n    (...args: any) => {\n      clearTimeout(timer);\n      timer = window.setTimeout(() => callback(...args), wait);\n    };\n\n  const isFieldWatched = (\n    name: FieldPath<TFieldValues>,\n    isBlurEvent?: boolean,\n  ) =>\n    !isBlurEvent &&\n    (_names.watchAll ||\n      _names.watch.has(name) ||\n      _names.watch.has((name.match(/\\w+/) || [])[0]));\n\n  const _updateValid = async (shouldSkipRender?: boolean) => {\n    let isValid = false;\n\n    if (_proxyFormState.isValid) {\n      isValid = _options.resolver\n        ? isEmptyObject((await executeResolver()).errors)\n        : await executeBuildInValidation(_fields, true);\n\n      if (!shouldSkipRender && isValid !== _formState.isValid) {\n        _formState.isValid = isValid;\n        _subjects.state.next({\n          isValid,\n        });\n      }\n    }\n\n    return isValid;\n  };\n\n  const _updateFieldArray: BatchFieldArrayUpdate = (\n    name,\n    method,\n    args,\n    values = [],\n    shouldSetValues = true,\n    shouldSetFields = true,\n  ) => {\n    _stateFlags.action = true;\n\n    if (shouldSetFields && get(_fields, name)) {\n      const fieldValues = method(get(_fields, name), args.argA, args.argB);\n      shouldSetValues && set(_fields, name, fieldValues);\n    }\n\n    if (Array.isArray(get(_formState.errors, name))) {\n      const errors = method(get(_formState.errors, name), args.argA, args.argB);\n      shouldSetValues && set(_formState.errors, name, errors);\n      unsetEmptyArray(_formState.errors, name);\n    }\n\n    if (_proxyFormState.touchedFields && get(_formState.touchedFields, name)) {\n      const touchedFields = method(\n        get(_formState.touchedFields, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSetValues &&\n        set(_formState.touchedFields as TFieldValues, name, touchedFields);\n      unsetEmptyArray(_formState.touchedFields, name);\n    }\n\n    if (_proxyFormState.dirtyFields || _proxyFormState.isDirty) {\n      updateFieldArrayDirty(name, values);\n    }\n\n    _subjects.state.next({\n      isDirty: _getDirty(name, values),\n      dirtyFields: _formState.dirtyFields,\n      errors: _formState.errors,\n      isValid: _formState.isValid,\n    });\n  };\n\n  const updateErrors = (name: InternalFieldName, error: FieldError) => (\n    set(_formState.errors, name, error),\n    _subjects.state.next({\n      errors: _formState.errors,\n    })\n  );\n\n  const updateValidAndValue = (\n    name: InternalFieldName,\n    shouldSkipSetValueAs?: boolean,\n    ref?: Ref,\n  ) => {\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      const defaultValue = get(_formValues, name, get(_defaultValues, name));\n\n      isUndefined(defaultValue) ||\n      (ref && (ref as HTMLInputElement).defaultChecked) ||\n      shouldSkipSetValueAs\n        ? set(\n            _formValues,\n            name,\n            shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f),\n          )\n        : setFieldValue(name, defaultValue);\n    }\n\n    _stateFlags.mount && _updateValid();\n  };\n\n  const updateTouchAndDirty = (\n    name: InternalFieldName,\n    fieldValue: unknown,\n    isCurrentTouched?: boolean,\n    shouldRender = true,\n  ): Partial<\n    Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\n  > => {\n    let isFieldDirty = false;\n    const output: Partial<FormState<TFieldValues>> & { name: string } = {\n      name,\n    };\n    const isPreviousFieldTouched = get(_formState.touchedFields, name);\n\n    if (_proxyFormState.isDirty) {\n      const isPreviousFormDirty = _formState.isDirty;\n\n      _formState.isDirty = output.isDirty = _getDirty();\n      isFieldDirty = isPreviousFormDirty !== output.isDirty;\n    }\n\n    if (_proxyFormState.dirtyFields && !isCurrentTouched) {\n      const isPreviousFieldDirty = get(_formState.dirtyFields, name);\n      const isCurrentFieldPristine = deepEqual(\n        get(_defaultValues, name),\n        fieldValue,\n      );\n\n      isCurrentFieldPristine\n        ? unset(_formState.dirtyFields, name)\n        : set(_formState.dirtyFields as TFieldValues, name, true);\n      output.dirtyFields = _formState.dirtyFields;\n      isFieldDirty =\n        isFieldDirty ||\n        isPreviousFieldDirty !== get(_formState.dirtyFields, name);\n    }\n\n    if (isCurrentTouched && !isPreviousFieldTouched) {\n      set(_formState.touchedFields as TFieldValues, name, isCurrentTouched);\n      output.touchedFields = _formState.touchedFields;\n      isFieldDirty =\n        isFieldDirty ||\n        (_proxyFormState.touchedFields &&\n          isPreviousFieldTouched !== isCurrentTouched);\n    }\n\n    isFieldDirty && shouldRender && _subjects.state.next(output);\n\n    return isFieldDirty ? output : {};\n  };\n\n  const updateFieldArrayDirty = (name: any, value: any) => (\n    set(\n      _formState.dirtyFields as TFieldValues,\n      name,\n      setFieldArrayDirtyFields(\n        value,\n        get(_defaultValues, name, []),\n        get(_formState.dirtyFields, name, []),\n      ),\n    ),\n    unsetEmptyArray(_formState.dirtyFields, name)\n  );\n\n  const shouldRenderByError = async (\n    shouldSkipRender: boolean,\n    name: InternalFieldName,\n    isValid: boolean,\n    error?: FieldError,\n    fieldState?: {\n      dirty?: FieldNamesMarkedBoolean<TFieldValues>;\n      isDirty?: boolean;\n      touched?: FieldNamesMarkedBoolean<TFieldValues>;\n    },\n  ): Promise<void> => {\n    const previousFieldError = get(_formState.errors, name);\n    const shouldUpdateValid =\n      _proxyFormState.isValid && _formState.isValid !== isValid;\n\n    if (props.delayError && error) {\n      delayErrorCallback =\n        delayErrorCallback || debounce(updateErrors, props.delayError);\n      delayErrorCallback(name, error);\n    } else {\n      clearTimeout(timer);\n      error\n        ? set(_formState.errors, name, error)\n        : unset(_formState.errors, name);\n    }\n\n    if (\n      ((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\n        !isEmptyObject(fieldState) ||\n        shouldUpdateValid) &&\n      !shouldSkipRender\n    ) {\n      const updatedFormState = {\n        ...fieldState,\n        ...(shouldUpdateValid ? { isValid } : {}),\n        errors: _formState.errors,\n        name,\n      };\n\n      _formState = {\n        ..._formState,\n        ...updatedFormState,\n      };\n\n      _subjects.state.next(updatedFormState);\n    }\n\n    validateFields[name]--;\n\n    if (_proxyFormState.isValidating && !validateFields[name]) {\n      _subjects.state.next({\n        isValidating: false,\n      });\n      validateFields = {};\n    }\n  };\n\n  const executeResolver = async (name?: InternalFieldName[]) =>\n    _options.resolver\n      ? await _options.resolver(\n          { ..._formValues } as UnpackNestedValue<TFieldValues>,\n          _options.context,\n          getResolverOptions(\n            name || _names.mount,\n            _fields,\n            _options.criteriaMode,\n            _options.shouldUseNativeValidation,\n          ),\n        )\n      : ({} as ResolverResult<TFieldValues>);\n\n  const executeResolverValidation = async (names?: InternalFieldName[]) => {\n    const { errors } = await executeResolver();\n\n    if (names) {\n      for (const name of names) {\n        const error = get(errors, name);\n        error\n          ? set(_formState.errors, name, error)\n          : unset(_formState.errors, name);\n      }\n    } else {\n      _formState.errors = errors as FieldErrors<TFieldValues>;\n    }\n\n    return errors;\n  };\n\n  const executeBuildInValidation = async (\n    fields: FieldRefs,\n    shouldOnlyCheckValid?: boolean,\n    context = {\n      valid: true,\n    },\n  ) => {\n    for (const name in fields) {\n      const field = fields[name];\n\n      if (field) {\n        const fieldReference = field._f;\n        const fieldValue = omit(field, '_f');\n\n        if (fieldReference) {\n          const fieldError = await validateField(\n            field,\n            get(_formValues, fieldReference.name),\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          );\n\n          if (fieldError[fieldReference.name]) {\n            context.valid = false;\n\n            if (shouldOnlyCheckValid) {\n              break;\n            }\n          }\n\n          if (!shouldOnlyCheckValid) {\n            fieldError[fieldReference.name]\n              ? set(\n                  _formState.errors,\n                  fieldReference.name,\n                  fieldError[fieldReference.name],\n                )\n              : unset(_formState.errors, fieldReference.name);\n          }\n        }\n\n        fieldValue &&\n          (await executeBuildInValidation(\n            fieldValue,\n            shouldOnlyCheckValid,\n            context,\n          ));\n      }\n    }\n\n    return context.valid;\n  };\n\n  const _removeUnmounted = () => {\n    for (const name of _names.unMount) {\n      const field: Field = get(_fields, name);\n\n      field &&\n        (field._f.refs ? field._f.refs.every(live) : live(field._f.ref)) &&\n        unregister(name as FieldPath<TFieldValues>);\n    }\n\n    _names.unMount = new Set();\n  };\n\n  const _getDirty: GetIsDirty = (name, data) => (\n    name && data && set(_formValues, name, data),\n    !deepEqual(getValues(), _defaultValues)\n  );\n\n  const _getWatch: WatchInternal<TFieldValues> = (\n    names,\n    defaultValue,\n    isGlobal,\n  ) => {\n    const fieldValues = {\n      ...(_stateFlags.mount\n        ? _formValues\n        : isUndefined(defaultValue)\n        ? _defaultValues\n        : isString(names)\n        ? { [names]: defaultValue }\n        : defaultValue),\n    };\n\n    if (names) {\n      const result = convertToArrayPayload(names).map(\n        (fieldName) => (\n          isGlobal && _names.watch.add(fieldName as InternalFieldName),\n          get(fieldValues, fieldName as InternalFieldName)\n        ),\n      );\n\n      return Array.isArray(names) ? result : result[0];\n    }\n\n    isGlobal && (_names.watchAll = true);\n    return fieldValues;\n  };\n\n  const _getFieldArray = (name: InternalFieldName) =>\n    get(_stateFlags.mount ? _formValues : _defaultValues, name, []);\n\n  const setFieldValue = (\n    name: InternalFieldName,\n    value: SetFieldValue<TFieldValues>,\n    options: SetValueConfig = {},\n    shouldRender?: boolean,\n  ) => {\n    const field: Field = get(_fields, name);\n    let fieldValue: unknown = value;\n\n    if (field) {\n      const fieldReference = field._f;\n\n      if (fieldReference) {\n        set(_formValues, name, getFieldValueAs(value, fieldReference));\n\n        fieldValue =\n          isWeb && isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\n            ? ''\n            : value;\n\n        if (isMultipleSelect(fieldReference.ref)) {\n          [...fieldReference.ref.options].forEach(\n            (selectRef) =>\n              (selectRef.selected = (\n                fieldValue as InternalFieldName[]\n              ).includes(selectRef.value)),\n          );\n        } else if (fieldReference.refs) {\n          if (isCheckBoxInput(fieldReference.ref)) {\n            fieldReference.refs.length > 1\n              ? fieldReference.refs.forEach(\n                  (checkboxRef) =>\n                    (checkboxRef.checked = Array.isArray(fieldValue)\n                      ? !!(fieldValue as []).find(\n                          (data: string) => data === checkboxRef.value,\n                        )\n                      : fieldValue === checkboxRef.value),\n                )\n              : (fieldReference.refs[0].checked = !!fieldValue);\n          } else {\n            fieldReference.refs.forEach(\n              (radioRef: HTMLInputElement) =>\n                (radioRef.checked = radioRef.value === fieldValue),\n            );\n          }\n        } else {\n          fieldReference.ref.value = fieldValue;\n        }\n\n        shouldRender &&\n          _subjects.control.next({\n            values: _formValues,\n            name,\n          });\n      }\n    }\n\n    (options.shouldDirty || options.shouldTouch) &&\n      updateTouchAndDirty(name, fieldValue, options.shouldTouch);\n\n    options.shouldValidate && trigger(name as Path<TFieldValues>);\n  };\n\n  const setValues = (\n    name: FieldPath<TFieldValues>,\n    value: UnpackNestedValue<PathValue<TFieldValues, FieldPath<TFieldValues>>>,\n    options: SetValueConfig,\n  ) => {\n    for (const fieldKey in value) {\n      const fieldValue: SetFieldValue<TFieldValues> = value[fieldKey];\n      const fieldName = `${name}.${fieldKey}` as Path<TFieldValues>;\n      const field = get(_fields, fieldName);\n\n      (_names.array.has(name) ||\n        !isPrimitive(fieldValue) ||\n        (field && !field._f)) &&\n      !isDateObject(fieldValue)\n        ? setValues(fieldName, fieldValue, options)\n        : setFieldValue(fieldName, fieldValue, options, true);\n    }\n  };\n\n  const setValue: UseFormSetValue<TFieldValues> = (\n    name,\n    value,\n    options = {},\n  ) => {\n    const field = get(_fields, name);\n    const isFieldArray = _names.array.has(name);\n\n    set(_formValues, name, value);\n\n    if (isFieldArray) {\n      _subjects.array.next({\n        name,\n        values: _formValues,\n      });\n\n      if (\n        (_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\n        options.shouldDirty\n      ) {\n        updateFieldArrayDirty(name, value);\n\n        _subjects.state.next({\n          name,\n          dirtyFields: _formState.dirtyFields,\n          isDirty: _getDirty(name, value),\n        });\n      }\n    } else {\n      field && !field._f && !isNullOrUndefined(value)\n        ? setValues(name, value, options)\n        : setFieldValue(name, value, options, true);\n    }\n\n    isFieldWatched(name) && _subjects.state.next({});\n    _subjects.watch.next({\n      name,\n    });\n  };\n\n  const handleChange: ChangeHandler = async (event) => {\n    const target = event.target;\n    let name = target.name;\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      let error;\n      let isValid;\n      const fieldValue = target.type ? getFieldValue(field._f) : target.value;\n      const isBlurEvent = event.type === EVENTS.BLUR;\n      const shouldSkipValidation =\n        (!hasValidation(field._f) &&\n          !_options.resolver &&\n          !get(_formState.errors, name) &&\n          !field._f.deps) ||\n        skipValidation(\n          isBlurEvent,\n          get(_formState.touchedFields, name),\n          _formState.isSubmitted,\n          validationModeAfterSubmit,\n          validationModeBeforeSubmit,\n        );\n      const isWatched = isFieldWatched(name, isBlurEvent);\n\n      if (isBlurEvent) {\n        field._f.onBlur && field._f.onBlur(event);\n      } else if (field._f.onChange) {\n        field._f.onChange(event);\n      }\n\n      set(_formValues, name, fieldValue);\n\n      const fieldState = updateTouchAndDirty(\n        name,\n        fieldValue,\n        isBlurEvent,\n        false,\n      );\n\n      const shouldRender = !isEmptyObject(fieldState) || isWatched;\n\n      !isBlurEvent &&\n        _subjects.watch.next({\n          name,\n          type: event.type,\n        });\n\n      if (shouldSkipValidation) {\n        return (\n          shouldRender &&\n          _subjects.state.next({ name, ...(isWatched ? {} : fieldState) })\n        );\n      }\n\n      !isBlurEvent && isWatched && _subjects.state.next({});\n\n      validateFields[name] = validateFields[name] ? +1 : 1;\n\n      _proxyFormState.isValidating &&\n        _subjects.state.next({\n          isValidating: true,\n        });\n\n      if (_options.resolver) {\n        const { errors } = await executeResolver([name]);\n        error = get(errors, name);\n\n        if (isCheckBoxInput(target) && !error) {\n          const parentNodeName = getNodeParentName(name);\n          const parentField = get(_fields, parentNodeName);\n\n          if (\n            Array.isArray(parentField) &&\n            parentField.every(\n              (field: Field) => field._f && isCheckBoxInput(field._f.ref),\n            )\n          ) {\n            const parentError = get(errors, parentNodeName, {});\n            parentError.type && (error = parentError);\n            name = parentNodeName;\n          }\n        }\n\n        isValid = isEmptyObject(errors);\n      } else {\n        error = (\n          await validateField(\n            field,\n            get(_formValues, name) as Field,\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          )\n        )[name];\n\n        isValid = await _updateValid(true);\n      }\n\n      field._f.deps && trigger(field._f.deps as FieldPath<TFieldValues>[]);\n\n      shouldRenderByError(false, name, isValid, error, fieldState);\n    }\n  };\n\n  const trigger: UseFormTrigger<TFieldValues> = async (name, options = {}) => {\n    let isValid;\n    let validationResult;\n    const fieldNames = convertToArrayPayload(name) as InternalFieldName[];\n\n    _subjects.state.next({\n      isValidating: true,\n    });\n\n    if (_options.resolver) {\n      const errors = await executeResolverValidation(\n        isUndefined(name) ? name : fieldNames,\n      );\n\n      isValid = isEmptyObject(errors);\n      validationResult = name\n        ? !fieldNames.some((name) => get(errors, name))\n        : isValid;\n    } else if (name) {\n      validationResult = (\n        await Promise.all(\n          fieldNames.map(async (fieldName) => {\n            const field = get(_fields, fieldName);\n            return await executeBuildInValidation(\n              field && field._f ? { [fieldName]: field } : field,\n            );\n          }),\n        )\n      ).every(Boolean);\n      _updateValid();\n    } else {\n      validationResult = isValid = await executeBuildInValidation(_fields);\n    }\n\n    _subjects.state.next({\n      ...(!isString(name) || isValid !== _formState.isValid ? {} : { name }),\n      errors: _formState.errors,\n      isValid,\n      isValidating: false,\n    });\n\n    options.shouldFocus &&\n      !validationResult &&\n      focusFieldBy(\n        _fields,\n        (key) => get(_formState.errors, key),\n        name ? fieldNames : _names.mount,\n      );\n\n    return validationResult;\n  };\n\n  const getValues: UseFormGetValues<TFieldValues> = (\n    fieldNames?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>,\n  ) => {\n    const values = {\n      ..._defaultValues,\n      ...(_stateFlags.mount ? _formValues : {}),\n    };\n\n    return isUndefined(fieldNames)\n      ? values\n      : isString(fieldNames)\n      ? get(values, fieldNames as InternalFieldName)\n      : fieldNames.map((name) => get(values, name as InternalFieldName));\n  };\n\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\n    name\n      ? convertToArrayPayload(name).forEach((inputName) =>\n          unset(_formState.errors, inputName),\n        )\n      : (_formState.errors = {} as FieldErrors<TFieldValues>);\n\n    _subjects.state.next({\n      errors: _formState.errors,\n    });\n  };\n\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\n    const ref = ((get(_fields, name, { _f: {} }) as Field)._f || {}).ref;\n\n    set(_formState.errors, name, {\n      ...error,\n      ref,\n    });\n\n    _subjects.state.next({\n      name,\n      errors: _formState.errors,\n      isValid: false,\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watch: UseFormWatch<TFieldValues> = (\n    name?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>\n      | WatchObserver<TFieldValues>,\n    defaultValue?: unknown,\n  ) =>\n    isFunction(name)\n      ? _subjects.watch.subscribe({\n          next: (info: any) =>\n            name(\n              _getWatch(\n                undefined,\n                defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n              ),\n              info,\n            ),\n        })\n      : _getWatch(\n          name as InternalFieldName | InternalFieldName[],\n          defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n          true,\n        );\n\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) => {\n    for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n      _names.mount.delete(fieldName);\n      _names.array.delete(fieldName);\n\n      if (get(_fields, fieldName)) {\n        if (!options.keepValue) {\n          unset(_fields, fieldName);\n          unset(_formValues, fieldName);\n        }\n\n        !options.keepError && unset(_formState.errors, fieldName);\n        !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n        !options.keepTouched && unset(_formState.touchedFields, fieldName);\n        !_options.shouldUnregister &&\n          !options.keepDefaultValue &&\n          unset(_defaultValues, fieldName);\n      }\n    }\n\n    _subjects.watch.next({});\n\n    _subjects.state.next({\n      ..._formState,\n      ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\n    });\n\n    !options.keepIsValid && _updateValid();\n  };\n\n  const register: UseFormRegister<TFieldValues> = (name, options = {}) => {\n    const field = get(_fields, name);\n\n    set(_fields, name, {\n      _f: {\n        ...(field && field._f ? field._f : { ref: { name } }),\n        name,\n        mount: true,\n        ...options,\n      },\n    });\n    _names.mount.add(name);\n\n    !isUndefined(options.value) && set(_formValues, name, options.value);\n\n    field\n      ? isBoolean(options.disabled) &&\n        set(\n          _formValues,\n          name,\n          options.disabled\n            ? undefined\n            : get(_formValues, name, getFieldValue(field._f)),\n        )\n      : updateValidAndValue(name, true);\n\n    return isWindowUndefined\n      ? ({ name: name as InternalFieldName } as UseFormRegisterReturn)\n      : {\n          name,\n          ...(isBoolean(options.disabled)\n            ? { disabled: options.disabled }\n            : {}),\n          onChange: handleChange,\n          onBlur: handleChange,\n          ref: (ref: HTMLInputElement | null): void => {\n            if (ref) {\n              register(name, options);\n              let field: Field = get(_fields, name);\n              const fieldRef = isUndefined(ref.value)\n                ? ref.querySelectorAll\n                  ? (ref.querySelectorAll('input,select,textarea')[0] as Ref) ||\n                    ref\n                  : ref\n                : ref;\n\n              const isRadioOrCheckbox = isRadioOrCheckboxFunction(fieldRef);\n\n              if (\n                fieldRef === field._f.ref ||\n                (isRadioOrCheckbox &&\n                  compact(field._f.refs || []).find(\n                    (option) => option === fieldRef,\n                  ))\n              ) {\n                return;\n              }\n\n              field = {\n                _f: isRadioOrCheckbox\n                  ? {\n                      ...field._f,\n                      refs: [\n                        ...compact(field._f.refs || []).filter(\n                          (ref) => isHTMLElement(ref) && document.contains(ref),\n                        ),\n                        fieldRef,\n                      ],\n                      ref: { type: fieldRef.type, name },\n                    }\n                  : {\n                      ...field._f,\n                      ref: fieldRef,\n                    },\n              };\n\n              set(_fields, name, field);\n\n              (!options || !options.disabled) &&\n                updateValidAndValue(name, false, fieldRef);\n            } else {\n              const field: Field = get(_fields, name, {});\n              const shouldUnregister =\n                _options.shouldUnregister || options.shouldUnregister;\n\n              if (field._f) {\n                field._f.mount = false;\n              }\n\n              shouldUnregister &&\n                !(\n                  isNameInFieldArray(_names.array, name) && _stateFlags.action\n                ) &&\n                _names.unMount.add(name);\n            }\n          },\n        };\n  };\n\n  const handleSubmit: UseFormHandleSubmit<TFieldValues> =\n    (onValid, onInvalid) => async (e) => {\n      if (e) {\n        e.preventDefault && e.preventDefault();\n        e.persist && e.persist();\n      }\n      let hasNoPromiseError = true;\n      let fieldValues: any = { ..._formValues };\n\n      _subjects.state.next({\n        isSubmitting: true,\n      });\n\n      try {\n        if (_options.resolver) {\n          const { errors, values } = await executeResolver();\n          _formState.errors = errors as FieldErrors<TFieldValues>;\n          fieldValues = values;\n        } else {\n          await executeBuildInValidation(_fields);\n        }\n\n        if (\n          isEmptyObject(_formState.errors) &&\n          Object.keys(_formState.errors).every((name) => get(fieldValues, name))\n        ) {\n          _subjects.state.next({\n            errors: {} as FieldErrors<TFieldValues>,\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          onInvalid && (await onInvalid(_formState.errors, e));\n          _options.shouldFocusError &&\n            focusFieldBy(\n              _fields,\n              (key) => get(_formState.errors, key),\n              _names.mount,\n            );\n        }\n      } catch (err) {\n        hasNoPromiseError = false;\n        throw err;\n      } finally {\n        _formState.isSubmitted = true;\n        _subjects.state.next({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful:\n            isEmptyObject(_formState.errors) && hasNoPromiseError,\n          submitCount: _formState.submitCount + 1,\n          errors: _formState.errors,\n        });\n      }\n    };\n\n  const reset: UseFormReset<TFieldValues> = (\n    formValues,\n    keepStateOptions = {},\n  ) => {\n    const hasUpdatedFormValues = !isEmptyObject(formValues);\n    const updatedValues = formValues || _defaultValues;\n    const cloneUpdatedValues = cloneObject(updatedValues);\n\n    if (!keepStateOptions.keepDefaultValues) {\n      _defaultValues = updatedValues;\n    }\n\n    if (!keepStateOptions.keepValues) {\n      if (isWeb) {\n        for (const name of _names.mount) {\n          const field = get(_fields, name);\n          if (field && field._f) {\n            const fieldReference = Array.isArray(field._f.refs)\n              ? field._f.refs[0]\n              : field._f.ref;\n\n            try {\n              isHTMLElement(fieldReference) &&\n                fieldReference.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n\n      _formValues = props.shouldUnregister ? {} : cloneUpdatedValues;\n      _fields = {};\n\n      _subjects.control.next({\n        values: hasUpdatedFormValues ? cloneUpdatedValues : _defaultValues,\n      });\n\n      _subjects.watch.next({});\n\n      _subjects.array.next({\n        values: cloneUpdatedValues,\n      });\n    }\n\n    _names = {\n      mount: new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      watch: new Set(),\n      watchAll: false,\n      focus: '',\n    };\n\n    _subjects.state.next({\n      submitCount: keepStateOptions.keepSubmitCount\n        ? _formState.submitCount\n        : 0,\n      isDirty: keepStateOptions.keepDirty\n        ? _formState.isDirty\n        : keepStateOptions.keepDefaultValues\n        ? deepEqual(formValues, _defaultValues)\n        : false,\n      isSubmitted: keepStateOptions.keepIsSubmitted\n        ? _formState.isSubmitted\n        : false,\n      dirtyFields: keepStateOptions.keepDirty\n        ? _formState.dirtyFields\n        : ({} as FieldNamesMarkedBoolean<TFieldValues>),\n      touchedFields: keepStateOptions.keepTouched\n        ? _formState.touchedFields\n        : ({} as FieldNamesMarkedBoolean<TFieldValues>),\n      errors: keepStateOptions.keepErrors\n        ? _formState.errors\n        : ({} as FieldErrors<TFieldValues>),\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n\n    _stateFlags.mount =\n      !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\n    _stateFlags.watch = !!props.shouldUnregister;\n  };\n\n  const setFocus: UseFormSetFocus<TFieldValues> = (name) =>\n    get(_fields, name)._f.ref.focus();\n\n  return {\n    control: {\n      register,\n      unregister,\n      _getWatch,\n      _getDirty,\n      _updateValid,\n      _removeUnmounted,\n      _updateFieldArray,\n      _getFieldArray,\n      _subjects,\n      _proxyFormState,\n      get _fields() {\n        return _fields;\n      },\n      set _fields(value) {\n        _fields = value;\n      },\n      get _formValues() {\n        return _formValues;\n      },\n      set _formValues(value) {\n        _formValues = value;\n      },\n      get _stateFlags() {\n        return _stateFlags;\n      },\n      set _stateFlags(value) {\n        _stateFlags = value;\n      },\n      get _defaultValues() {\n        return _defaultValues;\n      },\n      set _defaultValues(value) {\n        _defaultValues = value;\n      },\n      get _names() {\n        return _names;\n      },\n      set _names(value) {\n        _names = value;\n      },\n      get _formState() {\n        return _formState;\n      },\n      set _formState(value) {\n        _formState = value;\n      },\n      get _options() {\n        return _options;\n      },\n      set _options(value) {\n        _options = {\n          ..._options,\n          ...value,\n        };\n      },\n    },\n    trigger,\n    register,\n    handleSubmit,\n    watch,\n    setValue,\n    getValues,\n    reset,\n    clearErrors,\n    unregister,\n    setError,\n    setFocus,\n  };\n}\n","import * as React from 'react';\n\nimport { createFormControl } from './logic/createFormControl';\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport {\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldValues,\n  FormState,\n  UseFormProps,\n  UseFormReturn,\n} from './types';\nimport { useSubscribe } from './useSubscribe';\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): UseFormReturn<TFieldValues, TContext> {\n  const _formControl = React.useRef<\n    UseFormReturn<TFieldValues, TContext> | undefined\n  >();\n  const [formState, updateFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  });\n\n  if (_formControl.current) {\n    _formControl.current.control._options = props;\n  } else {\n    _formControl.current = {\n      ...createFormControl(props),\n      formState,\n    };\n  }\n\n  const control = _formControl.current.control;\n\n  useSubscribe({\n    subject: control._subjects.state,\n    callback: (formState) => {\n      if (shouldRenderFormState(formState, control._proxyFormState, true)) {\n        control._formState = {\n          ...control._formState,\n          ...formState,\n        };\n\n        updateFormState({ ...control._formState });\n      }\n    },\n  });\n\n  React.useEffect(() => {\n    if (!control._stateFlags.mount) {\n      control._proxyFormState.isValid && control._updateValid();\n      control._stateFlags.mount = true;\n    }\n    if (control._stateFlags.watch) {\n      control._stateFlags.watch = false;\n      control._subjects.state.next({});\n    }\n    control._removeUnmounted();\n  });\n\n  _formControl.current.formState = getProxyFormState(\n    formState,\n    control._proxyFormState,\n  );\n\n  return _formControl.current;\n}\n"],"sourceRoot":""}