{"version":3,"sources":["views/dashboard/components/WidgetsCountData.js","views/charts/ChartLineSimple.js","views/charts/ChartBarSimple.js"],"names":["WidgetsCountData","data","listdevided","helpers","devideCard","randomType","index","currentNumber","soLuongHienTai","type","className","color","header","tenKhuVuc","text","children","footerSlot","pointed","style","height","dataPoints","pointHoverBackgroundColor","label","labels","name","placement","disabled","options","elements","line","tension","caret","backgroundColor","borderWidth","sm","lg","elementCarousel","map","group","elementItem","item","span","textAlign","background","gutter","autoplay","ChartLineSimple","props","borderColor","attributes","pointHoverColor","defaultDatasets","getColor","pointBackgroundColor","pointedOptions","scales","xAxes","offset","gridLines","zeroLineColor","ticks","fontSize","fontColor","yAxes","display","min","Math","apply","max","point","radius","hitRadius","hoverRadius","straightOptions","defaultOptions","Object","assign","maintainAspectRatio","legend","computedDatasets","deepObjectsMerge","datasets","computedOptions","defaultProps","ChartBarSimple","barPercentage","categoryPercentage"],"mappings":"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","file":"static/js/58.55151dcb.chunk.js","sourcesContent":["import CIcon from \"@coreui/icons-react\";\r\nimport {\r\n  CCol,\r\n  CDropdown, CDropdownItem, CDropdownMenu, CDropdownToggle, CWidgetDropdown\r\n} from \"@coreui/react\";\r\nimport { Carousel, Col, Row } from \"antd\";\r\nimport React from \"react\";\r\nimport helpers from \"../../../helpers/helpers\";\r\nimport ChartBarSimple from \"../../charts/ChartBarSimple\";\r\nimport ChartLineSimple from \"../../charts/ChartLineSimple\";\r\n\r\nconst WidgetsCountData = ({ data }) => {\r\n  const listdevided = helpers.devideCard(data);\r\n  const randomType = (data, index) => {\r\n    const currentNumber =`Số lượng xe hiện tại - ${data.soLuongHienTai}`;\r\n    var type = 0;\r\n    if (index == 0 || (index % 4 == 0 && index > 4)) {\r\n      type = 0;\r\n    }\r\n    if (index == 1 || (index % 4 == 1 && index > 4)) {\r\n      type = 1;\r\n    }\r\n    if (index == 2 || (index % 4 == 2 && index > 4)) {\r\n      type = 2;\r\n    }\r\n    if (index == 3 || (index % 4 == 3 && index > 4)) {\r\n      type = 3;\r\n    }\r\n    switch (type) {\r\n      case 0: {\r\n        return (\r\n          <Col key={index} className={'col-cus'}>\r\n            <CWidgetDropdown\r\n              className=\"box\"\r\n              color=\"gradient-primary\"\r\n              header={`${data.tenKhuVuc}`}\r\n              text={`${currentNumber}`}\r\n              children={<h3>abc</h3>}\r\n              footerSlot={\r\n                <ChartLineSimple\r\n                  pointed\r\n                  className=\"c-chart-wrapper mt-3 mx-3\"\r\n                  style={{ height: \"70px\" }}\r\n                  dataPoints={[65, 59, 84, 84, 51, 55, 40]}\r\n                  pointHoverBackgroundColor=\"primary\"\r\n                  label=\"Members\"\r\n                  labels=\"months\"\r\n                />\r\n              }\r\n            >\r\n              <CDropdown>\r\n                <CDropdownToggle color=\"transparent\">\r\n                  <CIcon name=\"cil-settings\" />\r\n                </CDropdownToggle>\r\n                <CDropdownMenu className=\"pt-0\" placement=\"bottom-end\">\r\n                  <CDropdownItem>Action</CDropdownItem>\r\n                  <CDropdownItem>Another action</CDropdownItem>\r\n                  <CDropdownItem>Something else here...</CDropdownItem>\r\n                  <CDropdownItem disabled>Disabled action</CDropdownItem>\r\n                </CDropdownMenu>\r\n              </CDropdown>\r\n            </CWidgetDropdown>\r\n          </Col>\r\n        );\r\n      }\r\n\r\n      case 1: {\r\n        return (\r\n          <Col key={index} className={'col-cus'}>\r\n            <CWidgetDropdown\r\n              color=\"gradient-info\"\r\n              header={`${data.tenKhuVuc}`}\r\n              text={currentNumber}\r\n              footerSlot={\r\n                <ChartLineSimple\r\n                  pointed\r\n                  className=\"mt-3 mx-3\"\r\n                  style={{ height: \"70px\" }}\r\n                  dataPoints={[1, 18, 9, 17, 34, 22, 11]}\r\n                  pointHoverBackgroundColor=\"info\"\r\n                  options={{ elements: { line: { tension: 0.00001 } } }}\r\n                  label=\"Members\"\r\n                  labels=\"months\"\r\n                />\r\n              }\r\n            >\r\n              <CDropdown>\r\n                <CDropdownToggle caret={false} color=\"transparent\">\r\n                  <CIcon name=\"cil-location-pin\" />\r\n                </CDropdownToggle>\r\n                <CDropdownMenu className=\"pt-0\" placement=\"bottom-end\">\r\n                  <CDropdownItem>Action</CDropdownItem>\r\n                  <CDropdownItem>Another action</CDropdownItem>\r\n                  <CDropdownItem>Something else here...</CDropdownItem>\r\n                  <CDropdownItem disabled>Disabled action</CDropdownItem>\r\n                </CDropdownMenu>\r\n              </CDropdown>\r\n            </CWidgetDropdown>\r\n          </Col>\r\n        );\r\n      }\r\n\r\n      case 2: {\r\n        return (\r\n          <CCol key={index} className={'col-cus'}>\r\n            <CWidgetDropdown\r\n              color=\"gradient-warning\"\r\n              header={`${data.tenKhuVuc}`}\r\n              text={currentNumber}\r\n              footerSlot={\r\n                <ChartLineSimple\r\n                  className=\"mt-3\"\r\n                  style={{ height: \"70px\" }}\r\n                  backgroundColor=\"rgba(255,255,255,.2)\"\r\n                  dataPoints={[78, 81, 80, 45, 34, 12, 40]}\r\n                  options={{ elements: { line: { borderWidth: 2.5 } } }}\r\n                  pointHoverBackgroundColor=\"warning\"\r\n                  label=\"Members\"\r\n                  labels=\"months\"\r\n                />\r\n              }\r\n            >\r\n              <CDropdown>\r\n                <CDropdownToggle color=\"transparent\">\r\n                  <CIcon name=\"cil-settings\" />\r\n                </CDropdownToggle>\r\n                <CDropdownMenu className=\"pt-0\" placement=\"bottom-end\">\r\n                  <CDropdownItem>Action</CDropdownItem>\r\n                  <CDropdownItem>Another action</CDropdownItem>\r\n                  <CDropdownItem>Something else here...</CDropdownItem>\r\n                  <CDropdownItem disabled>Disabled action</CDropdownItem>\r\n                </CDropdownMenu>\r\n              </CDropdown>\r\n            </CWidgetDropdown>\r\n          </CCol>\r\n        );\r\n      }\r\n\r\n      case 3: {\r\n        return (\r\n          <CCol key={index} className={'col-cus'}>\r\n            <CWidgetDropdown\r\n              color=\"gradient-danger\"\r\n              header={`${data.tenKhuVuc}`}\r\n              text={currentNumber}\r\n              footerSlot={\r\n                <ChartBarSimple\r\n                  className=\"mt-3 mx-3\"\r\n                  style={{ height: \"70px\" }}\r\n                  backgroundColor=\"rgb(250, 152, 152)\"\r\n                  label=\"Members\"\r\n                  labels=\"months\"\r\n                />\r\n              }\r\n            >\r\n              <CDropdown>\r\n                <CDropdownToggle\r\n                  caret\r\n                  className=\"text-white\"\r\n                  color=\"transparent\"\r\n                >\r\n                  <CIcon name=\"cil-settings\" />\r\n                </CDropdownToggle>\r\n                <CDropdownMenu className=\"pt-0\" placement=\"bottom-end\">\r\n                  <CDropdownItem>Action</CDropdownItem>\r\n                  <CDropdownItem>Another action</CDropdownItem>\r\n                  <CDropdownItem>Something else here...</CDropdownItem>\r\n                  <CDropdownItem disabled>Disabled action</CDropdownItem>\r\n                </CDropdownMenu>\r\n              </CDropdown>\r\n            </CWidgetDropdown>\r\n          </CCol>\r\n        );\r\n      }\r\n\r\n      default:\r\n        return (\r\n          <CCol sm=\"6\" lg=\"3\" key={index} className={'col-cus'}>\r\n            <CWidgetDropdown\r\n              color=\"gradient-warning\"\r\n              header=\"9.823\"\r\n              text=\"Members online\"\r\n              footerSlot={\r\n                <ChartLineSimple\r\n                  className=\"mt-3\"\r\n                  style={{ height: \"70px\" }}\r\n                  backgroundColor=\"rgba(255,255,255,.2)\"\r\n                  dataPoints={[78, 81, 80, 45, 34, 12, 40]}\r\n                  options={{ elements: { line: { borderWidth: 2.5 } } }}\r\n                  pointHoverBackgroundColor=\"warning\"\r\n                  label=\"Members\"\r\n                  labels=\"months\"\r\n                />\r\n              }\r\n            >\r\n              <CDropdown>\r\n                <CDropdownToggle color=\"transparent\">\r\n                  <CIcon name=\"cil-settings\" />\r\n                </CDropdownToggle>\r\n                <CDropdownMenu className=\"pt-0\" placement=\"bottom-end\">\r\n                  <CDropdownItem>Action</CDropdownItem>\r\n                  <CDropdownItem>Another action</CDropdownItem>\r\n                  <CDropdownItem>Something else here...</CDropdownItem>\r\n                  <CDropdownItem disabled>Disabled action</CDropdownItem>\r\n                </CDropdownMenu>\r\n              </CDropdown>\r\n            </CWidgetDropdown>\r\n          </CCol>\r\n        );\r\n        break;\r\n    }\r\n  };\r\n  const elementCarousel = listdevided.map((group, index) => {\r\n    const elementItem = group.map((item, index) => {\r\n      return (\r\n        <Col span={6} key={index}>\r\n            {randomType(item, index)}\r\n        </Col>\r\n      );\r\n    });\r\n    return (\r\n      <div key={index}>\r\n        <div\r\n          style={{\r\n            color: \"#fff\",\r\n            textAlign: \"center\",\r\n            background: \"#364d79\",\r\n          }}\r\n        >\r\n          <Row gutter={16} className=\"row-carousel\">\r\n            {elementItem}\r\n          </Row>\r\n        </div>\r\n      </div>\r\n    );\r\n  });\r\n\r\n  return (\r\n    // <CCard className=\"scroll-horiziontal\">\r\n    //   <CCardHeader>\r\n    //     <h4 className=\"card-title mb-0\">Analysis Data From Logs SOC</h4>\r\n    //   </CCardHeader>\r\n    //   <CCardBody>\r\n    //     <CRow className=\"scroll-horiziontal\">\r\n\r\n    //     </CRow>\r\n    //   </CCardBody>\r\n    // </CCard>\r\n    <Carousel autoplay>{elementCarousel}</Carousel>\r\n    // <CCard style={{backgroundColor:'transparent'}}>\r\n\r\n    // </CCard>\r\n  );\r\n};\r\n\r\nexport default WidgetsCountData;\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { getColor, deepObjectsMerge } from '@coreui/utils'\r\nimport { CChartLine } from '@coreui/react-chartjs'\r\n\r\nconst ChartLineSimple = props => {\r\n\r\n  const {\r\n    borderColor,\r\n    backgroundColor,\r\n    pointHoverBackgroundColor,\r\n    dataPoints,\r\n    label,\r\n    pointed,\r\n    ...attributes\r\n  } = props\r\n\r\n  const pointHoverColor = (()=>{\r\n    if (pointHoverBackgroundColor) {\r\n      return pointHoverBackgroundColor\r\n    } else if (backgroundColor !== 'transparent') {\r\n      return backgroundColor\r\n    }\r\n    return borderColor\r\n  })()\r\n\r\n  const defaultDatasets = (()=>{\r\n    return [\r\n      {\r\n        data: dataPoints,\r\n        borderColor: getColor(borderColor),\r\n        backgroundColor: getColor(backgroundColor),\r\n        pointBackgroundColor: getColor(pointHoverColor),\r\n        pointHoverBackgroundColor: getColor(pointHoverColor),\r\n        label\r\n      }\r\n    ]\r\n  })()\r\n\r\n  const pointedOptions = (()=>{\r\n    return {\r\n      scales: {\r\n        xAxes: [\r\n          {\r\n            offset: true,\r\n            gridLines: {\r\n              color: 'transparent',\r\n              zeroLineColor: 'transparent'\r\n            },\r\n            ticks: {\r\n              fontSize: 2,\r\n              fontColor: 'transparent'\r\n            }\r\n          }\r\n        ],\r\n        yAxes: [\r\n          {\r\n            display: false,\r\n            ticks: {\r\n              display: false,\r\n              min: Math.min.apply(Math, dataPoints) - 5,\r\n              max: Math.max.apply(Math, dataPoints) + 5\r\n            }\r\n          }\r\n        ]\r\n      },\r\n      elements: {\r\n        line: {\r\n          borderWidth: 1\r\n        },\r\n        point: {\r\n          radius: 4,\r\n          hitRadius: 10,\r\n          hoverRadius: 4\r\n        }\r\n      }\r\n    }\r\n  })()\r\n\r\n  const straightOptions = (()=>{\r\n    return {\r\n      scales: {\r\n        xAxes: [{\r\n          display: false\r\n        }],\r\n        yAxes: [{\r\n          display: false\r\n        }]\r\n      },\r\n      elements: {\r\n        line: {\r\n          borderWidth: 2\r\n        },\r\n        point: {\r\n          radius: 0,\r\n          hitRadius: 10,\r\n          hoverRadius: 4\r\n        }\r\n      }\r\n    }\r\n  })()\r\n\r\n  const defaultOptions = (()=>{\r\n    const options = pointed ? pointedOptions : straightOptions\r\n      return Object.assign({}, options, {\r\n        maintainAspectRatio: false,\r\n        legend: {\r\n          display: false\r\n        }\r\n      })\r\n  })()\r\n\r\n  const computedDatasets = (() => {\r\n    return deepObjectsMerge(defaultDatasets, attributes.datasets || {})\r\n  })()\r\n\r\n  const computedOptions = (() => {\r\n    return deepObjectsMerge(defaultOptions, attributes.options || {})\r\n  })()\r\n\r\n  // render\r\n\r\n  return (\r\n    <CChartLine\r\n      {...attributes}\r\n      datasets={computedDatasets}\r\n      options={computedOptions}\r\n      labels={label}\r\n    />\r\n  )\r\n}\r\n\r\nChartLineSimple.propTypes = {\r\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\r\n  className: PropTypes.string,\r\n  //\r\n  borderColor: PropTypes.string,\r\n  backgroundColor: PropTypes.string,\r\n  pointHoverBackgroundColor: PropTypes.string,\r\n  dataPoints: PropTypes.array,\r\n  label: PropTypes.string,\r\n  pointed: PropTypes.bool\r\n};\r\n\r\nChartLineSimple.defaultProps = {\r\n  borderColor: 'rgba(255,255,255,.55)',\r\n  backgroundColor: 'transparent',\r\n  dataPoints: [10, 22, 34, 46, 58, 70, 46, 23, 45, 78, 34, 12],\r\n  label: 'Sales'\r\n};\r\n\r\nexport default ChartLineSimple\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { getColor } from '@coreui/utils'\r\nimport { CChartBar } from '@coreui/react-chartjs'\r\n\r\nconst ChartBarSimple = props => {\r\n\r\n  const {\r\n    backgroundColor,\r\n    pointHoverBackgroundColor,\r\n    dataPoints,\r\n    label,\r\n    pointed,\r\n    ...attributes\r\n  } = props\r\n\r\n  const defaultDatasets = (()=>{\r\n    return [\r\n      {\r\n        data: dataPoints,\r\n        backgroundColor: getColor(backgroundColor),\r\n        pointHoverBackgroundColor: getColor(pointHoverBackgroundColor),\r\n        label: label,\r\n        barPercentage: 0.5,\r\n        categoryPercentage: 1\r\n      }\r\n    ]\r\n  })()\r\n\r\n  const defaultOptions = (()=>{\r\n    return {\r\n      maintainAspectRatio: false,\r\n      legend: {\r\n        display: false\r\n      },\r\n      scales: {\r\n        xAxes: [{\r\n          display: false\r\n        }],\r\n        yAxes: [{\r\n          display: false\r\n        }]\r\n      }\r\n    }\r\n  })()\r\n\r\n  // render\r\n  return (\r\n    <CChartBar\r\n      {...attributes}\r\n      datasets={defaultDatasets}\r\n      options={defaultOptions}\r\n      labels={label}\r\n    />\r\n  )\r\n}\r\n\r\nChartBarSimple.propTypes = {\r\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\r\n  className: PropTypes.string,\r\n  //\r\n  backgroundColor: PropTypes.string,\r\n  pointHoverBackgroundColor: PropTypes.string,\r\n  dataPoints: PropTypes.array,\r\n  label: PropTypes.string,\r\n  pointed: PropTypes.bool\r\n};\r\n\r\nChartBarSimple.defaultProps = {\r\n  backgroundColor: 'rgba(0,0,0,.2)',\r\n  dataPoints: [10, 22, 34, 46, 58, 70, 46, 23, 45, 78, 34, 12],\r\n  label: 'Sales'\r\n};\r\n\r\nexport default ChartBarSimple\r\n"],"sourceRoot":""}